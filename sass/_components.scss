/////////////////////////
// LOGO

.logo {
    height: 3.25rem;
    margin-left: 2rem;
}

/////////////////////////
// SEARCH BOX
.search {
    flex: 0 0 40%;

    display: flex;
    align-items: center;
    justify-content: center;

    @media only screen and (max-width: $bp-smallest){
        order: 1;
        // the search element should shrink or grow and the width should 100% so it will collapse straight at 500px
        flex: 0 0 100%;
        background-color: var(--color-grey-light-2);
    }

    &__input {
        // its needs to set inherit cause input doesn't inherit it automatically
        font-family: inherit;
        font-size: inherit;
        color: inherit;
        background-color: var(--color-grey-light-2);
        border: none;
        padding: .7rem 2rem;
        // high number just to have to rounded edges
        border-radius: 100px;
        width: 90%;
        transition: all .2s;
        margin-right: -3.5rem;

        &:focus {
            outline: none;
            width: 100%;
            background-color: var(--color-grey-light-3);
        }

        // to select the placeholder of the input its webkit so work only in chrome and safari
        &::-webkit-input-placeholder {
            font-weight: 100;
            color: var(--color-grey-light-4);
        }
    }

    // select the button when the input is in focus to adjust its background color
    &__input:focus + &__button {
        background-color: var(--color-grey-light-3);
    }

    &__button {
        border: none;
        background-color: var(--color-grey-light-2);

        &:focus {
            outline:none;
        }

        &:active {
            transform: translateY(2px);
        }
    }

    &__icon {
        height: 2rem;
        width: 2rem;
        // fill is to color svg icons 
        fill:var(--color-grey-dark-3)
    }
}

/////////////////////////
// USER NAV
.user-nav {
    align-self: stretch;

    display: flex;
    align-items: center;

    // all direct childrens of user-nav
    & > * {
        padding: 0 2rem;
        cursor: pointer;
        height: 100%;
        display: flex;
        align-items: center;
    }

    & > *:hover {
        background-color: var(--color-grey-light-2);
    }

    &__icon-box {
       position: relative;
    }

    &__icon {
        height: 2.25rem;
        width: 2.25rem;
        fill: var(--color-grey-dark-2);
    }

    &__notification {
        font-size: .8rem;
        height: 1.75rem;
        width: 1.75rem;
        border-radius: 50%;
        background-color: var(--color-primary);
        color: #fff;
        position: absolute;
        top: 1.5rem;
        right: 1.1rem;

        // center the text
        display: flex;
        // horizontally
        justify-content: center;
        // vertically
        align-items: center;
    }

    &__user-photo{
        height: 3.75rem;
        border-radius: 75%;
        margin-right: 1rem;
    }
}

/////////////////////////
// SIDE NAV

.side-nav{
    font-size: 1.4rem;
    list-style: none;
    margin-top: 3.5rem;

     @media only screen and (max-width: $bp-medium) {
        display: flex;
        margin: 0;
    }

    &__item {
       position: relative;

       &:not(:last-child){
           margin-bottom: .5rem;

           @media only screen and (max-width: $bp-medium) {
                margin-bottom: 0;
            }
       }

       @media only screen and (max-width: $bp-medium) {
           flex: 1;
        }

    }

    &__item::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 3px;
        background-color: var(--color-primary);
        transform: scaleY(0);
        // it tells the transformation where to start from default is center
        // transform-origin: bottom;
        // we can give transitions to different properties in this case to width
        // first .4s means it will take that long second .2s means it will be delayed by 2s
        // cubic-bezier define the animation speed and curve
        transition: transform .2s,
                    width .4s cubic-bezier(1,0,0,1) .2s,
                    background-color .1s;
    }


    &__item:hover::before,
    &__item--active::before {
        transform: scaleY(1);
        width: 100%;
    }

    // the selector means when item is active(so clicked) to this with the before element
    &__item:active::before {
        background-color: var(--color-primary-light);
    }

    &__link:link,
    &__link:visited {
        color:var(--color-grey-light-1);
        text-decoration: none;
        font-weight: 100;
        text-transform: uppercase;
        display: block;
        padding: 1.5rem 3rem;
        display: flex;
        align-items: center;
        // z index only works if we have a position specified 
        position: relative;
        z-index: 10;

        @media only screen and (max-width: $bp-medium) {
            justify-content: center;
            padding: 2rem;
        }

         @media only screen and (max-width: $bp-small){
            flex-direction: column;
            padding: 1.5rem .5rem;
        }
    }

    &__icon {
        width: 1.75rem;
        height: 1.75rem;
        fill: currentColor;
        margin-right: 2rem;

        @media only screen and (max-width: $bp-small){
            margin-right: 0;
            margin-bottom: .7rem;
            width: 1.5rem;
            height: 1.5rem;
        }
    }


}

/////////////////////////
// LEGAL TEXT

.legal {
    font-size: 1.2rem;
    color: var(--color-grey-light-4);
    text-align: center;
    padding: 2.5rem;

    @media only screen and (max-width: $bp-medium) {
        display: none;
    }
}

/////////////////////////
// GALLERY

.gallery {
    display: flex;

    &__photo {
        width: 100%;
        // img should be always inline-block or block to avoid white space in the bottom
        display: block;
    }
}

/////////////////////////
// HOTEL REVIEW

.overview {
    display: flex;
    align-items: center;
    border-bottom: var(--line);

    @media only screen and (max-width: $bp-smallest){
        flex-wrap: wrap;
        justify-content: space-between;
    }

    &__heading {
        font-size: 2.25rem;
        font-weight: 300;
        text-transform: uppercase;
        letter-spacing: 1px;
        padding: 1.5rem 3rem;

        @media only screen and (max-width: $bp-small){
            font-size: 1.8rem;
            padding: 1.25rem 2rem;
        }

        @media only screen and (max-width: $bp-smallest){
            padding: 1.5rem 1rem;
            width: 50%;
        }
        
    }

    &__stars {
        // flex: 1;
        // it is a better solution because the element will occupy only the width to takes up not till the next element as flex: 1; would do (maybe do some research its working only in flex box
        margin-right: auto;
        // to align svg because otherwise they would have a bit of a space on the bottom
        display: flex;

        @media only screen and (max-width: $bp-smallest){
            width: 50%;
            justify-content: flex-end;
        }
    }

    &__icon-star,
    &__icon-location {
        width: 1.75rem;
        height: 1.75rem;
        fill: var(--color-primary);
    }

    &__icon-location {
        margin-right: .5rem;
    }

    &__location {
        font-size: 1.2rem;
        display: flex;
        align-items: center;

        @media only screen and (max-width: $bp-smallest){
            margin-left: 1rem;
        }
    }

    &__rating {
        background-color: var(--color-primary);
        margin-left: 3rem;
        color: #fff;
        align-self: stretch;
        padding:  1.5rem 2.25rem;

        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;

        @media only screen and (max-width: $bp-small){
            padding: 1rem 1.5rem;
        }
    }

    &__rating-average {
        font-size: 2.25rem;
        font-weight: 300;
        margin-bottom: .5rem;

        @media only screen and (max-width: $bp-small){
            font-size: 1.8rem;
        }
    }

    &__rating-count {
        font-size: .8rem;
        text-transform: uppercase;

        @media only screen and (max-width: $bp-small){
            font-size: .5rem;
        }
    }


}

/////////////////////////
// INLINE BUTTON


.btn-inline {
    border: none;
    color: var(--color-primary);
    // to make sure that in multiple use cases it will have the font-size of the parent element
    font-size: inherit;
    // current color to have the same color as the text
    border-bottom: 1px solid currentColor;
    padding-bottom: 2px;
    display: inline-block;
    background-color: transparent;
    cursor: pointer;
    transform: all .2s;

    & span {
        margin-left: 3px;
        transition: margin-left .2s;
    }

    &:hover {
        // because of currentColor the border will adjust
        color: var(--color-grey-dark-1);

        span {
            margin-left: 8px;
        }
    }

    &:focus {
        // remove default blue border
        outline: none;
        animation: pulsate 1s infinite;
    }
}

@keyframes pulsate {
    
    0% {
        transform: scale(1);
        box-shadow: none;
    }

    50% {
        transform: scale(1.05);
        box-shadow: 0 1rem 4rem rgba(0,0,0,.25);
    }

    100% {
        transform: scale(1);
        box-shadow: none;
    }
}

/////////////////////////
// PARAGRAPH

// using last-of-type because last-child wouldn't work since we have a list and other components within
.paragraph:not(:last-of-type) {
    margin-bottom: 2rem;
}

/////////////////////////
// LIST

.list {
    list-style: none;
    margin: 3rem 0;
    padding: 3rem;
    border-top: var(--line);
    border-bottom: var(--line);

    display: flex;
    // to allow elements to wrap to another line
    flex-wrap: wrap;

    &__item {
        flex: 0 0 50%;
        margin-bottom: 1.7rem;
    }

    &__item::before {
        content: "";
        display: inline-block;
        height: 1rem;
        width: 1rem;
        margin-right: .7rem;

        // for NEWER browsers we will use masks
        // It basically creates a background and it can be only seen where the background is which is in our case the logo
        @supports (-webkit-mask-image: url()) or (mask-image: url()) {
            background-color: var(--color-primary);
            -webkit-mask-image: url(../img/chevron-thin-right.svg);
            -webkit-mask-size: cover;
            mask-image: url(../img/chevron-thin-right.svg);
            mask-size: cover;
            // to make sure it is working where its supported
            background-image: none;
        }

        // implementing svg icon with css (to make it easy we included the icon in img folder rather then using the sprite file)
        // in this way we won't be able to manipulate the icon so change its color etc. therefore we will use masks
        // For older browsers we can use the background cause masks not supported by them
        background-image: url(../img/chevron-thin-right.svg);
        background-size: cover;
    }
}

/////////////////////////
// RECOMMENDATIONS

.recommend {
    font-size: 1.3rem;
    color: var(--color-grey-dark-3);

    display: flex;
    justify-content: space-between;
    align-items: center;

    &__count {

    }

    &__friends {
        display: flex;
    }

    &__photo {
        // because we set box-sizing to border-box in our global settings the border will make the pictures smaller, in order to avoid id we can set the box-sizing back to default (content-box) for this element
        box-sizing: content-box;
        height: 4rem;
        width: 4rem;
        border-radius: 50%;
        border: 1px solid #fff;

        &:not(:last-child){
            margin-right: -2rem;
        }
    }
}


/////////////////////////
// REVIEWS

.review {
    background-color: #fff;
    box-shadow: var(--shadow-light);
    padding: 3rem;
    margin-bottom: 3.5rem;
    position: relative;
    overflow: hidden;

    @media only screen and (max-width: $bp-medium) {
        padding: 2rem;
        margin-bottom: 3rem;
    }

    &__text {
        margin-bottom: 2rem;
        z-index: 10;
        position: relative;
    }

    &__user {
        display: flex;
        align-items: center;
    }

    &__photo {
        height: 4.5rem;
        width: 4.5rem;
        border-radius: 50%;
        margin-right: 2rem;
    }

    &__user-box {
        margin-right: auto;
        font-size: 1.2rem;

        display: flex;
        flex-direction: column;
    }

    &__user-name {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: .2rem;
        text-transform: uppercase;
    }

    &__user-date {
        color: var(--color-grey-dark-3);
        font-size: 1rem;
    }   

    &__rating {
        color: var(--color-primary);
        font-size: 1.7rem;
        font-weight: 400;
    }

    &::before {
        content: "\201C";
        position: absolute;
        top: -2.75rem;
        left: -1rem;
        line-height: 1;
        font-size: 20rem;
        color: var(--color-grey-light-2);
        font-family: sans-serif;
        z-index: 1;
    }
}


/////////////////////////
// CALL TO ACTION

.cta {
    padding: 3.5rem 0;
    text-align: center;

    @media only screen and (max-width: $bp-medium) {
        padding: 2.5rem 0;
    }

    &__book-now {
        font-size: 2rem;
        font-weight: 300;
        text-transform: uppercase;
        margin-bottom: 2.5rem;
        line-height: 3rem;

        @media only screen and (max-width: $bp-smallest) {
            padding: 2.5rem 1rem;
        }

    }
}


/////////////////////////
// BUTTON DESIGN

.btn {
    font-size: 1.5rem;
    font-weight: 300;
    text-transform: uppercase;
    border-radius: 100px;
    border: none;
    background-image: linear-gradient(to right, var(--color-primary-light), var(--color-primary-dark));
    color: white;
    position: relative;
    // to make the invisible part hidden (basically what ever is outside of the element will be hidden which is the case here since that span is absolute positioned to outside of the element
    overflow: hidden;
    cursor: pointer;

    & > * {
        // because a span is an inline element and we need and inline block to be able to use padding
        display: inline-block;
        height: 100%;
        width: 100%;
        transition: all .2s;
    }

    &__visible {
        // this is what will define the size of the btn
        padding: 2rem 7.5rem;
    }

    &__invisible {
        display: inline-block;
        position: absolute;
        padding: 2rem;
        left: 0;
        // it will move it up out of the element
        top: -100%;
        
    }

    &:hover {
        background-image: linear-gradient(to left, var(--color-primary-light), var(--color-primary-dark));
    }

    &:hover &__visible {
        transform: translateY(100%);
    }

    &:hover &__invisible {
        top: 0;
    }

    &:focus {
        outline: none;
        animation: pulsate 1s infinite;
    }
}